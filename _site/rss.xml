<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>平静的技术@github</title>
        <description>平静的技术@github - 抽汗烟的笨笨</description>
        <link>http://username.github.io</link>
        <link>http://username.github.io</link>
        <lastBuildDate>2014-03-13T11:29:51+08:00</lastBuildDate>
        <pubDate>2014-03-13T11:29:51+08:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>string字符串编码[转]通俗易懂</title>
                <description>&lt;p&gt;我们已经讲过了，字符串也是一种数据类型，但是，字符串比较特殊的是还有一个编码问题。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;因为计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理。最早的计算机在设计时采用8个比特（bit）作为一个字节（byte），所以，一个字节能表示的最大的整数就是255（二进制11111111=十进制255），如果要表示更大的整数，就必须用更多的字节。比如两个字节可以表示的最大整数是65535，4个字节可以表示的最大整数是4294967295。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;由于计算机是美国人发明的，因此，最早只有127个字母被编码到计算机里，也就是大小写英文字母、数字和一些符号，这个编码表被称为ASCII编码，比如大写字母A的编码是65，小写字母z的编码是122。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;但是要处理中文显然一个字节是不够的，至少需要两个字节，而且还不能和ASCII编码冲突，所以，中国制定了GB2312编码，用来把中文编进去。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;你可以想得到的是，全世界有上百种语言，日本把日文编到Shift_JIS里，韩国把韩文编到Euc-kr里，各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码.&lt;br /&gt; &lt;img src=&quot;/images/3.png&quot; alt=&quot;&quot; /&gt; &lt;br /&gt; 因此，Unicode应运而生。Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Unicode标准也在不断发展，但最常用的是用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要4个字节）。现代操作系统和大多数编程语言都直接支持Unicode。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;现在，捋一捋ASCII编码和Unicode编码的区别：ASCII编码是1个字节，而Unicode编码通常是2个字节。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;字母A用ASCII编码是十进制的65，二进制的01000001；&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;字母0用ASCII编码是十进制的48，二进制的00110000，注意字母’0’和整数0是不同的；&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;汉字中已经超出了ASCII编码的范围，用Unicode编码是十进制的20013，二进制的01001110 00101101。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;你可以猜测，如果把ASCII编码的A用Unicode编码，只需要在前面补0就可以，因此，A的Unicode编码是00000000 01000001。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;新的问题又出现了：如果统一成Unicode编码，乱码问题从此消失了。但是，如果你写的文本基本上全部是英文的话，用Unicode编码比ASCII编码需要多一倍的存储空间，在存储和传输上就十分不划算。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;所以，本着节约的精神，又出现了把Unicode编码转化为“可变长编码”的UTF-8编码。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间：&lt;br /&gt; &lt;img src=&quot;/images/2.png&quot; alt=&quot;&quot; /&gt; &lt;br /&gt; 从上面的表格还可以发现，UTF-8编码有一个额外的好处，就是ASCII编码实际上可以被看成是UTF-8编码的一部分，所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;搞清楚了ASCII、Unicode和UTF-8的关系，我们就可以总结一下现在计算机系统通用的字符编码工作方式：&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件：&lt;br /&gt; &lt;img src=&quot;/images/0.png&quot; alt=&quot;&quot; /&gt; &lt;br /&gt; 浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器：&lt;br /&gt; &lt;img src=&quot;/images/1.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt; 所以你看到很多网页的源码上会有类似&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;&lt;span class='nt'&gt;&amp;lt;meta&lt;/span&gt; &lt;span class='na'&gt;charset=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt; &lt;span class='nt'&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;的信息，表示该网页正是用的UTF-8编码。&lt;/p&gt;</description>
                <link>http://username.github.io/2014/03/13/string</link>
                <guid>http://username.github.io/2014/03/13/string</guid>
                <pubDate>2014-03-13T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>djangotinymce</title>
                <description>&lt;h1 id=&quot;djangotinymce&quot;&gt;django+tinymce&lt;/h1&gt;

&lt;p&gt;给django加一个在线编辑器，暂时先用tinymce来做，因为着急要用一下，所以没花太多时间去看configration,以下就是简单的介绍一下吧！ &lt;br /&gt; &amp;emsp;&amp;emsp;在tinymce&lt;a href=&quot;http://www.tinymce.com/index.php&quot;&gt;官网&lt;/a&gt;下载对应的zip，然后解压。我在django中设置了一个静态文静目录static，然后该目录下建立一个js目录，然后把解压缩的代码扔进去，代码目录是这样&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;mysite/static/js/tinymce&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;关于静态目录设定，是这样的 &lt;br /&gt;&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='n'&gt;STATIC_URL&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s'&gt;&amp;#39;/static/&amp;#39;&lt;/span&gt;
&lt;span class='n'&gt;STATICFILES_DIRS&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;
    &lt;span class='n'&gt;os&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;path&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;join&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;BASE_DIR&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;static&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;       
&lt;span class='p'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后在模板文件里面引用tinymce就可以&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='nx'&gt;script&lt;/span&gt; &lt;span class='nx'&gt;type&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class='nx'&gt;src&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;js/tinymce/tinymce.min.js&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class='err'&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='nx'&gt;script&lt;/span&gt; &lt;span class='nx'&gt;type&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;&amp;gt;&lt;/span&gt;
&lt;span class='nx'&gt;tinyMCE&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;init&lt;/span&gt;&lt;span class='p'&gt;({&lt;/span&gt;
    &lt;span class='nx'&gt;mode&lt;/span&gt; &lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;textareas&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
    &lt;span class='nx'&gt;theme&lt;/span&gt; &lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;modern&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
    &lt;span class='nx'&gt;width&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;780px&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
    &lt;span class='nx'&gt;language&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;zh_cn&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
    &lt;span class='nx'&gt;menubar&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='kc'&gt;false&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
    &lt;span class='nx'&gt;plugins&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;
    &lt;span class='s2'&gt;&amp;quot;advlist autolink autosave link image lists charmap print preview hr anchor pagebreak&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
    &lt;span class='s2'&gt;&amp;quot;contextmenu directionality emoticons template textcolor paste fullpage textcolor&amp;quot;&lt;/span&gt;
    &lt;span class='p'&gt;],&lt;/span&gt;
    &lt;span class='nx'&gt;toolbar_items_size&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;small&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
    &lt;span class='nx'&gt;toolbar1&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;undo redo | bold italic underline strikethrough forecolor | alignleft aligncenter alignright | bullist blockquote link unlink code preview&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
&lt;span class='p'&gt;});&lt;/span&gt;
&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='err'&gt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样就把tinymce引入进来了，然后在html代码里编写的textarea就会自动转换成tinymce。&lt;/p&gt;</description>
                <link>http://username.github.io/2014/03/12/djangotinymce</link>
                <guid>http://username.github.io/2014/03/12/djangotinymce</guid>
                <pubDate>2014-03-12T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>django pagination实践+总结</title>
                <description>&lt;p&gt;简单记录一下django分页的用法，django自带分页功能pagination，不过用起来稍微有点小复杂，所以个人建议用django-pagination扩展，还是很方便的！&lt;br /&gt; 其&lt;a href=&quot;https://pypi.python.org/pypi/django-pagination&quot;&gt;官方&lt;/a&gt;有一个很清晰的使用例子，以下简单的记录以下：&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;将源文件下载后，解压，然后在目录中python setup.py install,然后将解压目录中的pagination目录拷贝到项目根目录下&lt;/li&gt;

&lt;li&gt;修改项目setting.py文件，需要添加或修改的内容如下&lt;/li&gt;
&lt;/ol&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='n'&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;
	&lt;span class='s'&gt;&amp;#39;pagination&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='n'&gt;MIDDLEWARE_CLASSES&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;
	&lt;span class='s'&gt;&amp;#39;pagination.middleware.PaginationMiddleware&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='n'&gt;TEMPLATE_CONTEXT_PROCESSORS&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;
    &lt;span class='s'&gt;&amp;quot;django.contrib.auth.context_processors.auth&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; 
    &lt;span class='s'&gt;&amp;quot;django.core.context_processors.debug&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; 
    &lt;span class='s'&gt;&amp;quot;django.core.context_processors.i18n&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
    &lt;span class='s'&gt;&amp;quot;django.core.context_processors.media&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
    &lt;span class='s'&gt;&amp;quot;django.core.context_processors.request&amp;quot;&lt;/span&gt;
&lt;span class='p'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;模板中添加如下内容（以下内容中，请把$$换成%，因为{和%凑在一起和markdown语法冲突）&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;模板顶部添加&lt;br /&gt; {$ load pagination_tags $}；&lt;/li&gt;

&lt;li&gt;处理需要循环的数据变量&lt;br /&gt; {$ autopaginate 变量名称 $} or {$ autopaginate 变量名称 10 $}&lt;br /&gt; &lt;br /&gt;注：这里的10代表每页显示条目,这句写好后，后面就可以开始循环输出变量了&lt;br /&gt;&lt;/li&gt;

&lt;li&gt;显示分页页码&lt;br /&gt; {$ paginate $} 注：如果页数小于2的话，这个不会显示&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;其他的选项，可以在setting.py的配置最后一想中设置&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;PAGINATION_DEFAULT_PAGINATION 每页显示数量&lt;/p&gt;

&lt;p&gt;PAGINATION_DEFAULT_WINDOW 分页显示在当前页左右两边的页数&lt;/p&gt;

&lt;p&gt;PAGINATION_DEFAULT_ORPHANS 最后一页显示的最小页数，默认为0&lt;/p&gt;

&lt;p&gt;PAGINATION_INVALID_PAGE_RAISES_404 当页数不存在时，是否显示404页面&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;至此，简单的分页就做完了。&lt;/p&gt;</description>
                <link>http://username.github.io/2014/03/12/django-pagination</link>
                <guid>http://username.github.io/2014/03/12/django-pagination</guid>
                <pubDate>2014-03-12T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>jekyll+markdown通俗易懂</title>
                <description>&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;原来没接触过jekyll和markdown,网络上很多文章写的都不怎么接地气，那我就科普一下知识吧，不对无喷啊！！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在github上写博客，一定要用jekyll吗？不用，你自己如果手写html代码，那就不用，直接看这篇&lt;a href=&quot;http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html&quot;&gt;文章&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;当然了如果你要是觉得每次写博客还得写代码很累，那你可以试试markdown，一种写文章的方法，这个能代替html吗？不能，他就是一篇特殊点的文章，来一篇简单点的&lt;a href=&quot;http://jianshu.io/p/q81RER&quot;&gt;教程&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;jekyll可以把markdown翻译成html文档，这下你明白了吧&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;问：那代码高亮功能在哪里？&lt;/p&gt;&lt;p&gt;答：markdown写文章的时候做特殊标记，jekyll翻译的时候做相应处理，所以就是一个jekyll插件喽～&lt;/p&gt;&lt;p&gt;问：为什么别人的博客页面很好看？&lt;/p&gt;&lt;p&gt;答：你可以自己做漂亮的页面，别说你不会啊！也可以直接clone现成的，本博客用的就是[jekyllbootstrap](http://jekyllbootstrap.com/usage/jekyll-quick-start.html),他的快速指南还是不错的！&lt;/p&gt;</description>
                <link>http://username.github.io/2014/02/13/jekyllmarkdown</link>
                <guid>http://username.github.io/2014/02/13/jekyllmarkdown</guid>
                <pubDate>2014-02-13T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>搬来搬去终于来到这里</title>
                <description>&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;很早之前的博客*平静的技术*本来是托管在国外的VPS上的，但是访问速度一直也不是很稳定，必定是离中国太远了。后来索性停了博客，换用一些云笔记类的产品。用久了又觉得分享起来不是很方便，没有了开源精神。好吧，早知道github的pages,那把原来的域名转过来，直接做一个静态博客也是不错的！！&lt;/p&gt;&lt;p&gt;前两天在网上看到一句话&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;现在是写博客的人原来越少了，转载博客的人却越来越多了&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;深深的同意此说法！不过希望自己还是能记录下些东西，毕竟一直是个愿意写点东西的性格！！&lt;/p&gt;&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='cp'&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class='k'&gt;echo&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;I like this work!&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='cp'&gt;?&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
                <link>http://username.github.io/2014/02/13/hello-world</link>
                <guid>http://username.github.io/2014/02/13/hello-world</guid>
                <pubDate>2014-02-13T00:00:00+08:00</pubDate>
        </item>


</channel>
</rss>
